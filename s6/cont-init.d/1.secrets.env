#!/usr/bin/with-contenv node
'use strict';

const fs = require('fs'),
const http = require('https');
const outputWritePath = "/var/run/s6/container_environment/";
const vaultGroup = process.env.VAULT_GROU;
const exchangeAddress = process.env.EXCHANGE_HOST;
const vaultHost = getVaultHost();

let vaultToken;

getAuthenticationToken(onAuthenticationToken);

function onAuthenticationToken() {
  getSecretListFromVault(onSecretListFromVault)
}

function onSecretListFromVault(secretList){
  secretList.forEach(getSecretAndWrite);
 }


// Helpers

function getAuthenticationToken(callback) {
  makeRequest({
    host: exchangeAddress,
    path: `/group/token/${ vaultGroup }`,
    port: '443',
  }, (response) => {
    vaultToken = authToken;
    callback();
  });

 }

function getSecretListFromVault(callback) {

  makeRequest({
    host: vaultHost,
    path: `/v1/secret/${ vaultGroup }/?list=true`,
    port: '8200',
    headers: {'x-vault-token': vaultToken}
  }, (response)=>{
    let secretList = JSON.parse(response).data.keys;
    callback(secretList);
  });

}


function getSecretsFromVault(key, callback) {

  makeRequest({
    host: vaultHost,
    path: `/v1/secret/${ vaultGroup }/${ key }`,
    port: '8200',
    headers: {'x-vault-token': vaultToken}
  }, (response)=>{
    let secrets = JSON.parse(response);
    callback(secrets.data);
  });

}
 
function getSecretAndWrite(secret){
  getSecretsFromVault(secret, writeSecretData); 
}

function writeSecretData(secrets) {
    Object.keys(secrets).forEach((key)=>{
        let secret = secrets[key];
        console.log(`Writing secret: ${key}`);
        fs.writeFileSync(outputWritePath + key, secret);
    });
}

function makeRequest(opts, callback){
  http.request(vaultOptions, function(response){
    let responseData = ''
    response.on('data', function (chunk) {
      responseData += chunk;
    });

    response.on('end', function () {
      callback(responseData);
    });
  });
}

function getVaultHost(){
    let hostname = /:\/\/(.*):/.match(process.env.VAULT_ADDR);
    if(hostname == null){
      console.error(`Unable to find vault host. Environtment $VAULT_ADDR is set to ${process.env.VAULT_ADDR}`);
    }
    return hostname[1];
}
