#!/usr/bin/with-contenv node

'use strict';

const fs = require('fs');
const http = require('https');
const outputWritePath = "/var/run/s6/container_environment/";
const vaultGroup = process.env.VAULT_GROUP;
const exchangeAddress = process.env.EXCHANGE_HOST;
const vaultHost = getVaultHost();

let vaultToken;
if (!vaultHost) {
  console.warn('Unable to fetch secrets. Skipping...');
} else {
  vaultToken = getAuthenticationToken(onAuthenticationToken);
}

function onAuthenticationToken() {
  getSecretListFromVault(onSecretListFromVault)
}

function onSecretListFromVault(secretList) {
  secretList.forEach(getSecretAndWrite);
}


// Helpers

function getAuthenticationToken(callback) {
  makeRequest({
    host: exchangeAddress,
    path: `/group/token/${ vaultGroup }`,
    port: '443',
  }, (response) => {
    callback(response);
  });

}

function getSecretListFromVault(callback) {

  makeRequest({
    host: vaultHost,
    path: `/v1/secret/${ vaultGroup }/?list=true`,
    port: '8200',
    headers: {
      'x-vault-token': vaultToken
    }
  }, (response) => {
    let secretList = JSON.parse(response).data.keys;
    callback(secretList);
  });

}


function getSecretsFromVault(key, callback) {

  makeRequest({
    host: vaultHost,
    path: `/v1/secret/${ vaultGroup }/${ key }`,
    port: '8200',
    headers: {
      'x-vault-token': vaultToken
    }
  }, (response) => {
    let secrets = JSON.parse(response);
    callback(secrets.data);
  });

}

function getSecretAndWrite(secret) {
  getSecretsFromVault(secret, writeSecretData);
}

function writeSecretData(secrets) {
  Object.keys(secrets).forEach((key) => {
    let secret = secrets[key];
    console.log(`Writing secret: ${key}`);
    fs.writeFileSync(outputWritePath + key, secret);
  });
}

function makeRequest(options, callback) {
  http.request(options, function(response) {
    let responseData = ''
    response.on('data', function(chunk) {
      responseData += chunk;
    });

    response.on('end', function() {
      callback(responseData);
    });
  });
}

function getVaultHost() {

  if (!process.env.VAULT_ADDR) {
    console.log(`$VAULT_ADDR is not set!`);
    return null;
  }

  let hostname = process.env.VAULT_ADDR.match(/:\/\/(.*):/);
  if (hostname == null) {
    console.log(
      `Unable to find vault host. Environtment $VAULT_ADDR is set to ${process.env.VAULT_ADDR}`
    );
    return null;
  }
  return hostname[1];
}
